#!/usr/bin/env node
/**
 * Get environment configuration from a Quilt catalog's config.json
 *
 * This script fetches config.json from a Quilt catalog URL and attempts to:
 * 1. Parse the configuration
 * 2. Query AWS CloudFormation to find the stack using resource identifiers
 * 3. Extract stack outputs and parameters
 * 4. Generate environment variables for .env
 *
 * Usage:
 *   node bin/get-env.js https://quilt-catalog.yourcompany.com
 *   node bin/get-env.js https://quilt-catalog.yourcompany.com --write
 */

const fs = require("fs");
const path = require("path");

// Import utility functions from lib/utils
const { inferStackConfig } = require("../lib/utils/stack-inference");

// Parse command line arguments (only when run directly)
let args, catalogUrl, outputFile, writeFile;
if (require.main === module) {
    args = process.argv.slice(2);
    catalogUrl = args.find((arg) => !arg.startsWith("--"));
    outputFile = args.find((arg) => arg.startsWith("--output="))?.split("=")[1];
    writeFile = args.includes("--write");

    if (!catalogUrl || args.includes("--help") || args.includes("-h")) {
        printHelp();
        process.exit(catalogUrl ? 0 : 1);
    }
}

// CLI-specific functions moved to lib/utils/stack-inference.ts
// Re-export for backward compatibility if needed

/**
 * Format environment variables for output
 */
function formatEnvVars(vars) {
    const lines = [];

    lines.push("# ==============================================================================");
    lines.push("# INFERRED CONFIGURATION");
    lines.push("# ==============================================================================");
    lines.push("# Generated by: bin/get-env.js");
    lines.push("# Date: " + new Date().toISOString());
    lines.push("#");
    lines.push("# ⚠️  IMPORTANT: Review and verify all values before using!");
    lines.push("#    Some values may need manual verification or completion.");
    lines.push("# ==============================================================================");
    lines.push("");

    for (const [key, value] of Object.entries(vars)) {
        if (key.startsWith("#")) {
            lines.push(`${key}: ${value}`);
        } else {
            lines.push(`${key}=${value}`);
        }
    }

    lines.push("");
    lines.push("# ==============================================================================");
    lines.push("# REQUIRED VALUES NOT INFERRED - Must be filled manually");
    lines.push("# ==============================================================================");
    lines.push("PREFIX=benchling-webhook");
    lines.push("BENCHLING_TENANT=your-tenant");
    lines.push("BENCHLING_CLIENT_ID=your-client-id");
    lines.push("BENCHLING_CLIENT_SECRET=your-client-secret");
    lines.push("BENCHLING_APP=benchling-webhook");
    lines.push("BENCHLING_API_KEY=your-api-key");
    lines.push("BENCHLING_APP_DEFINITION_ID=appdef_your_id_here");
    lines.push("ENABLE_WEBHOOK_VERIFICATION=true");
    lines.push("BENCHLING_TEST_ENTRY=etr_123456789");
    lines.push("");

    return lines.join("\n");
}

/**
 * Print help
 */
function printHelp() {
    console.log("Usage: node bin/get-env.js <catalog-url> [options]");
    console.log("");
    console.log("Arguments:");
    console.log("  catalog-url    URL of Quilt catalog (e.g., https://quilt-catalog.yourcompany.com)");
    console.log("");
    console.log("Options:");
    console.log("  --output=FILE  Write output to FILE instead of stdout");
    console.log("  --write        Write to env.inferred by default (without dot - user-visible)");
    console.log("  --help, -h     Show this help message");
    console.log("");
    console.log("Examples:");
    console.log("  node bin/get-env.js https://nightly.quilttest.com");
    console.log("  node bin/get-env.js https://nightly.quilttest.com --write");
    console.log("  node bin/get-env.js https://nightly.quilttest.com --output=env.staging");
    console.log("");
    console.log("Description:");
    console.log("  This script fetches config.json from a Quilt catalog and infers");
    console.log("  environment variables needed for benchling-webhook deployment by:");
    console.log("  1. Parsing the catalog configuration");
    console.log("  2. Querying AWS CloudFormation to find the associated stack");
    console.log("  3. Extracting stack outputs and parameters");
    console.log("  4. Generating environment variable assignments");
    console.log("");
    console.log("Requirements:");
    console.log("  - AWS CLI installed and configured");
    console.log("  - AWS credentials with CloudFormation read permissions");
    console.log("  - Network access to the catalog URL");
}

/**
 * Main execution
 */
async function main() {
    try {
        const result = await inferStackConfig(catalogUrl);

        // Format output
        const output = formatEnvVars(result.inferredVars);

        // Print summary
        console.log("=".repeat(80));
        console.log("INFERRED CONFIGURATION");
        console.log("=".repeat(80));
        console.log("");
        console.log(output);
        console.log("");

        // Write to file if requested
        const targetFile = outputFile || (writeFile ? "env.inferred" : null);
        if (targetFile) {
            const fullPath = path.resolve(targetFile);

            // Check if .env already exists and warn before proceeding
            const envPath = path.resolve(".env");
            if (fs.existsSync(envPath)) {
                console.log("⚠️  NOTICE: A .env file already exists!");
                console.log(`   Writing to ${targetFile} instead to avoid overwriting your configuration.`);
                console.log("");
            }

            fs.writeFileSync(fullPath, output);
            console.log("=".repeat(80));
            console.log(`✓ Configuration written to: ${fullPath}`);
            console.log("=".repeat(80));
            console.log("");
            console.log("Next steps:");
            console.log("  1. Review the generated file and verify all values");
            console.log("  2. Fill in the REQUIRED VALUES section with your Benchling credentials");
            if (fs.existsSync(envPath)) {
                console.log("  3. Carefully merge with your existing .env file (DO NOT overwrite!)");
                console.log("     Compare: diff .env env.inferred");
            } else {
                console.log("  3. Copy to .env when ready: cp env.inferred .env");
            }
            console.log("");
        } else {
            console.log("=".repeat(80));
            console.log("To save this configuration, run:");
            console.log(`  node bin/get-env.js ${catalogUrl} --write`);
            console.log("=".repeat(80));
            console.log("");
        }

    } catch (error) {
        console.error("Error:", error.message);
        process.exit(1);
    }
}

if (require.main === module) {
    main();
}

// For backward compatibility, re-export from the new location
module.exports = require("../lib/utils/stack-inference");
