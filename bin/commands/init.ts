import { existsSync, writeFileSync } from "fs";
import { resolve } from "path";
import chalk from "chalk";
import ora from "ora";
import boxen from "boxen";
import { prompt } from "enquirer";
import { inferConfiguration } from "../benchling-webhook";

interface InitOptions {
    output?: string;
    force?: boolean;
    minimal?: boolean;
    infer?: boolean;
}

export async function initCommand(options: InitOptions): Promise<void> {
    console.log(
        boxen(chalk.bold("Benchling Webhook Setup"), {
            padding: 1,
            borderColor: "cyan",
            borderStyle: "round",
        }),
    );
    console.log();

    console.log("Let's configure your deployment. You'll need:");
    console.log("  • Access to your Quilt catalog");
    console.log("  • An S3 bucket for storing data");
    console.log("  • Benchling API credentials");
    console.log();
    console.log(chalk.dim("Press Ctrl+C at any time to cancel."));
    console.log();

    // Check if output file exists
    const outputPath = resolve(options.output || ".env");
    if (existsSync(outputPath) && !options.force) {
        console.error(chalk.yellow(`⚠️  File already exists: ${outputPath}`));
        console.error();

        const response: { overwrite: boolean } = await prompt({
            type: "confirm",
            name: "overwrite",
            message: "Overwrite existing file?",
            initial: false,
        });

        if (!response.overwrite) {
            console.log(chalk.yellow("Setup cancelled"));
            process.exit(0);
        }
        console.log();
    }

    // Prompt for required values
    const answers: {
        catalog: string;
        bucket: string;
        tenant: string;
        clientId: string;
        clientSecret: string;
        appId: string;
    } = await prompt([
        {
            type: "input",
            name: "catalog",
            message: "Quilt catalog URL (domain only):",
            initial: "quilt-catalog.company.com",
            validate: (value: string) =>
                /^[a-z0-9.-]+\.[a-z]{2,}$/i.test(value) || "Please enter a valid domain name",
        },
        {
            type: "input",
            name: "bucket",
            message: "S3 data bucket name:",
            initial: "my-data-bucket",
            validate: (value: string) =>
                /^[a-z0-9.-]{3,63}$/.test(value) || "Please enter a valid S3 bucket name",
        },
        {
            type: "input",
            name: "tenant",
            message: "Benchling tenant (XXX if you login to XXX.benchling.com):",
            validate: (value: string) =>
                value.trim().length > 0 || "Tenant is required",
        },
        {
            type: "input",
            name: "clientId",
            message: "Benchling OAuth client ID:",
            validate: (value: string) =>
                value.trim().length > 0 || "Client ID is required",
        },
        {
            type: "password",
            name: "clientSecret",
            message: "Benchling OAuth client secret:",
            validate: (value: string) =>
                value.trim().length > 0 || "Client secret is required",
        },
        {
            type: "input",
            name: "appId",
            message: "Benchling app definition ID:",
            validate: (value: string) =>
                value.trim().length > 0 || "App definition ID is required",
        },
    ]);

    // Build .env content
    const envLines: string[] = [];

    envLines.push("# ==============================================================================");
    envLines.push("# Benchling Webhook Configuration");
    envLines.push("# ==============================================================================");
    envLines.push("# Generated by: npx @quiltdata/benchling-webhook init");
    envLines.push("# Date: " + new Date().toISOString());
    envLines.push("# ==============================================================================");
    envLines.push("");

    envLines.push("# Quilt Configuration");
    envLines.push(`QUILT_CATALOG=${answers.catalog}`);
    envLines.push(`QUILT_USER_BUCKET=${answers.bucket}`);
    envLines.push("");

    envLines.push("# Benchling Configuration");
    envLines.push(`BENCHLING_TENANT=${answers.tenant}`);
    envLines.push(`BENCHLING_CLIENT_ID=${answers.clientId}`);
    envLines.push(`BENCHLING_CLIENT_SECRET=${answers.clientSecret}`);
    envLines.push(`BENCHLING_APP_DEFINITION_ID=${answers.appId}`);
    envLines.push("");

    // Attempt inference if requested
    let inferredVars: Record<string, string> = {};

    if (options.infer !== false) {
        console.log();
        const spinner = ora("Inferring additional configuration from catalog...").start();

        const inferenceResult = await inferConfiguration(answers.catalog);

        if (inferenceResult.success) {
            inferredVars = inferenceResult.inferredVars;
            spinner.succeed("Successfully inferred additional configuration");

            if (inferredVars.CDK_DEFAULT_ACCOUNT) {
                envLines.push("# AWS Configuration (inferred)");
                envLines.push(`CDK_DEFAULT_ACCOUNT=${inferredVars.CDK_DEFAULT_ACCOUNT}`);
                envLines.push(`CDK_DEFAULT_REGION=${inferredVars.CDK_DEFAULT_REGION}`);
                envLines.push("");
            }

            if (inferredVars.QUEUE_NAME) {
                envLines.push("# SQS Configuration (inferred)");
                envLines.push(`QUEUE_NAME=${inferredVars.QUEUE_NAME}`);
                envLines.push(`QUEUE_URL=${inferredVars.QUEUE_URL}`);
                envLines.push("");
            }

            if (inferredVars.QUILT_DATABASE) {
                envLines.push("# Quilt Database (inferred)");
                envLines.push(`QUILT_DATABASE=${inferredVars.QUILT_DATABASE}`);
                envLines.push("");
            }
        } else {
            spinner.warn(`Could not infer additional configuration: ${inferenceResult.error}`);
        }
    }

    // Add optional configuration section
    if (!options.minimal) {
        envLines.push("# Optional Configuration");
        envLines.push("# PKG_PREFIX=benchling");
        envLines.push("# LOG_LEVEL=INFO");
        envLines.push("# ENABLE_WEBHOOK_VERIFICATION=true");
        envLines.push("");
    }

    // Write file
    writeFileSync(outputPath, envLines.join("\n"));

    console.log();
    console.log(
        boxen(
            `${chalk.green.bold("✓ Configuration saved!")}\n\n` +
        `File: ${chalk.cyan(outputPath)}\n\n` +
        `${chalk.bold("Next steps:")}\n` +
        `  1. Review ${outputPath} and verify all values\n` +
        `  2. Run: ${chalk.cyan("npx @quiltdata/benchling-webhook deploy")}\n` +
        "  3. Configure your Benchling app\n\n" +
        `${chalk.dim("For help: npx @quiltdata/benchling-webhook --help")}`,
            { padding: 1, borderColor: "green", borderStyle: "round" },
        ),
    );
}
