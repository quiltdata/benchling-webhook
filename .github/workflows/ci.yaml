name: CI

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
      - 'v*.*.*-dev.*'
  pull_request:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install esbuild
        run: npm install -g esbuild

      - name: Install Node.js dependencies
        run: npm ci

      - name: Create temp directory for tests
        run: mkdir -p .tmp

      - name: Install Python dependencies
        working-directory: docker
        run: uv sync --all-extras

      - name: Run Python tests
        working-directory: docker
        run: uv run pytest -v -m "not local"

      - name: Run Node.js tests
        run: npm test

      - name: Build package
        run: npm run build

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/')

    outputs:
      image_uri: ${{ steps.image.outputs.IMAGE_URI }}
      version: ${{ steps.version.outputs.VERSION }}
      tag: ${{ steps.version.outputs.TAG }}
      is_prerelease: ${{ steps.version.outputs.IS_PRERELEASE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install Python dependencies
        working-directory: docker
        run: uv sync --all-extras

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          TAG=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG=$TAG" >> $GITHUB_OUTPUT

          # Check if this is a prerelease (contains -dev, -alpha, -beta, -rc)
          if [[ "$VERSION" =~ -dev\. ]] || [[ "$VERSION" =~ -(alpha|beta|rc) ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
            echo "This is a prerelease: $TAG"
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
            echo "This is a production release: $TAG"
          fi

      - name: Build and push Docker image
        working-directory: docker
        run: make push-ci VERSION=${{ steps.version.outputs.VERSION }}
        env:
          DOCKER_DEFAULT_PLATFORM: linux/amd64
          AWS_REGION: us-east-1

      - name: Get Docker image URI
        id: image
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/quiltdata/benchling:${{ steps.version.outputs.VERSION }}"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "Docker Image: $IMAGE_URI"

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: docker
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - name: Install Node.js dependencies
        run: npm ci

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.docker.outputs.version }}"
          TAG="${{ needs.docker.outputs.tag }}"
          IMAGE_URI="${{ needs.docker.outputs.image_uri }}"
          IS_PRERELEASE="${{ needs.docker.outputs.is_prerelease }}"

          # Check if CHANGELOG.md exists and extract notes
          if [ -f CHANGELOG.md ]; then
            # Try to extract version-specific notes from CHANGELOG
            CHANGELOG_NOTES=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' | sed '1d')
          fi

          # Generate release notes
          cat > /tmp/release_notes.md << 'EOFNOTES'
          ## Docker Image

          ```
          ${{ needs.docker.outputs.image_uri }}
          ```

          Pull and run:
          ```bash
          docker pull ${{ needs.docker.outputs.image_uri }}
          ```

          ## Installation

          ```bash
          npm install quilt-benchling-webhook@${{ needs.docker.outputs.version }}
          ```

          EOFNOTES

          # Add changelog notes if available
          if [ -n "$CHANGELOG_NOTES" ]; then
            echo "" >> /tmp/release_notes.md
            echo "## Changes" >> /tmp/release_notes.md
            echo "" >> /tmp/release_notes.md
            echo "$CHANGELOG_NOTES" >> /tmp/release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ needs.docker.outputs.tag }}
          body_path: /tmp/release_notes.md
          draft: false
          prerelease: ${{ needs.docker.outputs.is_prerelease == 'true' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to NPM
        if: needs.docker.outputs.is_prerelease == 'false'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        continue-on-error: true

      - name: Publish to GitHub Packages
        run: |
          # Update package.json to point to GitHub Packages registry
          jq '.publishConfig = {"registry": "https://npm.pkg.github.com"}' package.json > package.json.tmp
          mv package.json.tmp package.json

          # Publish to GitHub Packages
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.docker.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ needs.docker.outputs.is_prerelease == 'true' && 'Pre-release' || 'Production Release' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Docker Image:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.docker.outputs.image_uri }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package:**" >> $GITHUB_STEP_SUMMARY
          echo "- NPM: https://www.npmjs.com/package/quilt-benchling-webhook" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub: https://github.com/quiltdata/benchling-webhook/pkgs/npm/quilt-benchling-webhook" >> $GITHUB_STEP_SUMMARY
